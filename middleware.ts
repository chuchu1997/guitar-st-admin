import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
import { jwtVerify } from "jose";
const JWT_SECRET = new TextEncoder().encode(process.env.JWT_SECRET || "");

export async function middleware(request: NextRequest) {

  // C√°c ƒë∆∞·ªùng d·∫´n c√¥ng khai kh√¥ng c·∫ßn ƒëƒÉng nh·∫≠p
  const publicPaths = ["/login", "/register", "/public", "/api"];

  const token = request.cookies.get("token")?.value || "";
  const pathname = request.nextUrl.pathname;

  // ‚úÖ L·∫•y domain th·∫≠t t·ª´ headers
  const host = request.headers.get("host");
  const protocol = request.nextUrl.protocol || "https:";
  const fullUrl = `${protocol}//${host}${pathname}`;

  console.log("üß≠ Full URL:", fullUrl);
  console.log("üîê Token:", token);

  // Set CORS headers
  const res = NextResponse.next();
  res.headers.set("Access-Control-Allow-Credentials", "true");
  res.headers.set("Access-Control-Allow-Origin", "*"); // Replace with domain if needed
  res.headers.set("Access-Control-Allow-Methods", "GET,DELETE,PATCH,POST,PUT");
  res.headers.set(
    "Access-Control-Allow-Headers",
    "X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version"
  );

  // N·∫øu l√† route c√¥ng khai => cho qua
  if (publicPaths.some((publicPath) => pathname.startsWith(publicPath))) {
    return res;
  }

  // N·∫øu ch∆∞a c√≥ token => redirect v·ªÅ login
  if (!token) {
    return NextResponse.redirect(new URL("/login", `${protocol}//${host}`));
  }

  try {
 
    let isValidToken =  await jwtVerify(token, JWT_SECRET);
      if(!isValidToken){
      return NextResponse.redirect(new URL("/login", `${protocol}//${host}`));
      }
    // G·ª≠i y√™u c·∫ßu x√°c th·ª±c token ƒë·∫øn API n·ªôi b·ªô
    // const verifyResponse = await fetch(`${protocol}//${host}/api/auth/verify`, {
    //   method: "GET",
    //   headers: {
    //     Cookie: `token=${token}`,
    //     "Content-Type": "application/json",
    //   },
    // });

    // if (verifyResponse.status !== 200) {
    //   console.warn("‚ùå Token invalid, redirecting to login.");
    //   return NextResponse.redirect(new URL("/login", `${protocol}//${host}`));
    // }

    // ‚úÖ Token h·ª£p l·ªá
    return res;
  } catch (error) {
    console.error("üî¥ L·ªói khi x√°c th·ª±c token:", error);
    return NextResponse.redirect(new URL("/login", `${protocol}//${host}`));
  }
}

export const config = {
  matcher: ["/((?!_next/static|_next/image|favicon.ico).*)"],
};